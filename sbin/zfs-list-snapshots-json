#!/usr/bin/env python2
#
#  Copyright 2013 Science & Technology Facilities Council
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

MULTIPLIER = {
    'B': 1,
    'K': 1024,
    'M': 1024 * 1024,
    'G': 1024 * 1024 * 1024,
    'T': 1024 * 1024 * 1024 * 1024,
}

import subprocess
import json

def multiply(v):
    try:
        return int(float(v[:-1]) * MULTIPLIER[v[-1]])
    except ValueError:
        return None

def process(stats, filesystems):
    for fs in filesystems:
        name, used, avail, refer, mountpoint = fs.split()
        stats[name] = dict()
        stats[name]['used'] = multiply(used)
        stats[name]['avail'] = multiply(avail)
        stats[name]['refer'] = multiply(refer)

stats = {
    'pool' : {},
    'filesystems' : {},
    'snapshots' : {},
}

pool = subprocess.Popen(['/sbin/zpool', 'list', '-o', 'name,size,allocated,free,capacity'], stdout=subprocess.PIPE).communicate()[0].splitlines()[1:]
filesystems = subprocess.Popen(['/sbin/zfs', 'list', '-t', 'filesystem'], stdout=subprocess.PIPE).communicate()[0].splitlines()[1:]
snapshots = subprocess.Popen(['/sbin/zfs', 'list', '-t', 'snapshot'], stdout=subprocess.PIPE).communicate()[0].splitlines()[1:]

name, size, allocated, free, capacity = pool[0].split()
stats['pool'][name] = {}
stats['pool'][name]['size'] = multiply(size)
stats['pool'][name]['used'] = multiply(allocated)
stats['pool'][name]['avail'] = multiply(free)
stats['pool'][name]['perc'] = capacity

process(stats['filesystems'], filesystems)
process(stats['snapshots'], snapshots)

print json.dumps(stats)
